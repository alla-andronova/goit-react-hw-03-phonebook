{"version":3,"sources":["components/contactForm/ContactForm.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","components/App.jsx","index.jsx","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","components/filter/Filter.module.css"],"names":["ContactForm","state","name","number","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","form","label","input","onChange","type","pattern","title","required","btn","Component","ContactList","contacts","onDeleteClick","list","map","id","item","onClick","Filter","App","filter","addContact","find","contact","toLowerCase","alert","uuidv4","prevState","handleFilterChange","target","dataset","newContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","normalizedFilter","filteredContacts","includes","style","textAlign","length","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.dca36dfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} className={s.form}>\n          <label className={s.label}>\n            Name\n            <input\n              className={s.input}\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleChange}\n              type=\"text\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className={s.label}>\n            Number\n            <input\n              className={s.input}\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.handleChange}\n              type=\"tel\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\" className={s.btn}>\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, onDeleteClick }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={s.item}>\n          {name}: {number}\n          <button\n            data-id={id}\n            type=\"button\"\n            onClick={e => onDeleteClick(e)}\n            className={s.btn}\n          >\n            &#10060;\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDeleteClick: PropTypes.func.isRequired,\n  onClick: PropTypes.func,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './Filter.module.css';\n\nfunction Filter({ onChange, value }) {\n  return (\n    <>\n      <label className={s.label}>\n        Find contacts by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={e => onChange(e)}\n        />\n      </label>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './contactForm/ContactForm';\nimport ContactList from './contactList/ContactList';\nimport Filter from './filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n\n    this.setState(prevState => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  handleFilterChange = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  onDeleteClick = e => {\n    const id = e.target.dataset.id;\n    const newContacts = this.state.contacts.filter(\n      contact => contact.id !== id,\n    );\n\n    this.setState({\n      contacts: newContacts,\n      filter: '',\n    });\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n\n    const filteredContacts = normalizedFilter\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(normalizedFilter),\n        )\n      : contacts;\n\n    return (\n      <>\n        <h1 style={{ textAlign: 'center' }}>Phonebook</h1>\n\n        <ContactForm onSubmit={this.addContact} />\n\n        {contacts.length > 0 && (\n          <h2 style={{ textAlign: 'center' }}>Contacts</h2>\n        )}\n\n        {contacts.length > 0 && (\n          <Filter onChange={this.handleFilterChange} value={filter} />\n        )}\n\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteClick={this.onDeleteClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2IUqW\",\"label\":\"ContactForm_label__3cSwc\",\"input\":\"ContactForm_input__2u7Lv\",\"btn\":\"ContactForm_btn__2Kwxa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2K4PC\",\"item\":\"ContactList_item__3_vMR\",\"btn\":\"ContactList_btn__2LqVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__23XmH\",\"input\":\"Filter_input__3K0YO\"};"],"sourceRoot":""}